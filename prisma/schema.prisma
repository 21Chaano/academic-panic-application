// This is your Prisma schema file; see https://pris.ly/d/prisma-schema

// Models will precede enums, as definition order doesn't appear to affect
// functionality past the generator and datasource

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

// @brief Contains all the information needed to generate the web interface for the
// user, such as courses, collection of friends with requests sent, etc.
// 
// @details IDs are a necessity to distinguish different models of the same type,
// and may thus be attached to all models (not just users, which have a
// practical application for IDs).
model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  email    String   @unique
  password String
  role     Role     @default(USER)
  courses  Course[]

  // friendsRequested Int[] // "Friendships" will be computed when requested
  // TODO: Write an isFriends() function to determine to help document the
  // rationale behind having requested friends stored instead of current friends
}

enum Role {
  USER
  ADMIN
}

// @brief Information needed to yield a course that users have taken
model Course {
  id         Int      @id @default(autoincrement())
  title      String
  section    Int
  semester   Semester
  year       Int
  instructor String
  user       User[]

  @@unique([title, section, semester, year, instructor])
}

enum Semester {
  Spring
  Summer
  Fall
}

// // Will assume that the model for `Stuff` will be the baseline for "courses."
// // TODO: Eventually create something in the style of `Stuff` to hold a global
// // list of sessions planned.
// model Stuff {
//   id        Int       @id @default(autoincrement())
//   name      String
//   quantity  Int
//   condition Condition
//   owner     String
// }

// enum Condition {
//   excellent
//   good
//   fair
//   poor
// }
